1. Create Transaction UUID (for reference and maintaining correct state) in Sender's wallet.
2. Set lock_height for transaction kernel (current chain height).
3. Select inputs using desired selection strategy.
4. Calculate sum inputs blinding factors xI.
5. Create change_output.
6. Select blinding factor xC for change_output.
7. Create lock function sF that locks inputs and stores change_output in wallet and identifies wallet transaction log entry TS linking inputs + outputs.
8. Calculate tx_weight: MAX(-1 * num_inputs + 4 * (num_change_outputs + 1), 1).
9. Calculate fee: tx_weight * 1,000,000 nG.
10. Calculate total blinding excess sum for all inputs and outputs xS1 = xC - xI (private scalar).
11. Select a random nonce kS (private scalar).
12. Subtract random kernel offset oS from xS1. Calculate xS = xS1 - oS.
13. Multiply xS and kS by generator G to create public curve points xSG and kSG.
14. Add values to Slate for passing to other participants: UUID, inputs, change_outputs, fee, amount, lock_height, kSG, xSG, oS.
15. Recipient checks fee against number of inputs, change_outputs, and receiver_output.
16. Recipient creates receiver_output.
17. Recipient chooses random blinding factor xR for receiver_output.
18. Recipient calculates message M = fee | lock_height.
19. Recipient chooses random nonce kR.
20. Recipient multiplies xR and kR by generator G to create public curve points xRG and kRG.
21. Recipient computes Schnorr challenge e = SHA256(kRG + kSG | xRG + xSG | M).
22. Recipient computes Recipient Schnorr signature sR = kR + e * xR.
23. Sender finalizes transaction: Calculates message M = fee | lock_height.
24. Sender computes Schnorr challenge e = SHA256(kRG + kSG | xRG + xSG | M).
25. Sender verifies sR by verifying kRG + e * xRG = sRG.
26. Sender computes Sender Schnorr signature sS = kS + e * xS.
27. Sender calculates final signature s = (kSG+kRG, sS+sR).
28. Sender calculates public key for s: xG = xRG + xSG.
29. Sender verifies s against excess values in final transaction using xG.
30. Sender creates Transaction Kernel Containing: Excess signature s, Public excess xG, fee, lock_height.
31. Sender creates final transaction tx from Slate.
32. Sender posts tx to mempool via Epic Node.
33. Epic Node responds with confirmation.
34. Recipient confirms receiver_output and changes status to "Confirmed".
35. Sender changes status of inputs to "Spent" and status of change_output to "Confirmed".
36. Recipient manually removes receiver_output from wallet using transaction log entry TR (in case of error).
37. Sender unlocks inputs and deletes change_output identified in transaction log entry TS (in case of error).
