1. Create Transaction UUID (for reference and maintaining correct state).
2. Set lock_height for transaction kernel (current chain height).
3. Select inputs using desired selection strategy.
4. Calculate sum inputs blinding factors xI.
5. Create change_output.
6. Select blinding factor xC for change_output.
7. Create lock function sF that locks inputs and stores change_output in wallet and identifying wallet transaction log entry TS linking inputs + outputs (Not executed at this point).
8. Calculate tx_weight: MAX(-1 * num_inputs + 4 * (num_change_outputs + 1), 1) (+1 covers a single output on the receiver's side).
9. Calculate fee: tx_weight * 1_000_000 nG.
10. Calculate total blinding excess sum for all inputs and outputs xS1 = xC - xI (private scalar).
11. Select a random nonce kS (private scalar).
12. Subtract random kernel offset oS from xS1. Calculate xS = xS1 - oS.
13. Multiply xS and kS by generator G to create public curve points xSG and kSG.
14. Add values to Slate for passing to other participants: UUID, inputs, change_outputs, fee, amount, lock_height, kSG, xSG, oS.
15. Recipient receives Slate.
16. Recipient checks fee against number of inputs, change_outputs, and receiver_output.
17. Recipient creates receiver_output.
18. Recipient chooses random blinding factor for receiver_output xR (private scalar).
19. Recipient calculates message M = fee | lock_height.
20. Recipient chooses random nonce kR (private scalar).
21. Recipient computes Schnorr challenge e = SHA256(kRG + kSG | xRG + xSG | M).
22. Recipient computes Recipient Schnorr signature sR = kR + e * xR.
23. Recipient adds sR, xRG, kRG to Slate.
24. Recipient creates wallet output function rF that stores receiver_output in wallet with status "Unconfirmed".
25. Recipient executes wallet output function rF.
26. Finalize transaction - Sender calculates signatures and verifies against excess values.
27. Sender creates final transaction tx from Slate.
28. Sender posts tx to mempool via epic_node.
29. epic_node confirms transaction posting to Recipient.
30. Sender waits for Recipient confirmation and executes wallet lock function sF.
31. Recipient confirms receiver_output and changes status to "Confirmed".
32. Sender confirms change_output, changes status of inputs to "Spent" and change_output to "Confirmed".
