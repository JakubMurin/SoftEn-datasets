1. Create Transaction UUID (for reference and maintaining correct state) and Set lock_height for transaction kernel (current chain height).
2. Select inputs using desired selection strategy and Calculate sum inputs blinding factors xI.
3. Create change_output and Select blinding factor xC for change_output.
4. Create lock function sF that locks inputs and stores change_output in wallet and identifying wallet transaction log entry TS linking inputs + outputs (Not executed at this point).
5. Calculate tx_weight: MAX(-1 * num_inputs + 4 * (num_change_outputs + 1), 1) and Calculate fee: tx_weight * 1_000_000 nG.
6. Calculate total blinding excess sum for all inputs and outputs xS1 = xC - xI (private scalar).
7. Select a random nonce kS (private scalar) and Subtract random kernel offset oS from xS1. Calculate xS = xS1 - oS.
8. Multiply xS and kS by generator G to create public curve points xSG and kSG.
9. Add values to Slate for passing to other participants: UUID, inputs, change_outputs, fee, amount, lock_height, kSG, xSG, oS.
10. Check fee against number of inputs, change_outputs +1 * receiver_output.
11. Create receiver_output and Choose random blinding factor for receiver_output xR (private scalar).
12. Calculate message M = fee | lock_height and Choose random nonce kR (private scalar).
13. Multiply xR and kR by generator G to create public curve points xRG and kRG.
14. Compute Schnorr challenge e = SHA256(kRG + kSG | xRG + xSG | M).
15. Compute Recipient Schnorr signature sR = kR + e * xR.
16. Add sR, xRG, kRG to Slate and Create wallet output function rF that stores receiver_output in wallet with status "Unconfirmed" and identifying transaction log entry TR linking receiver_output with transaction.
17. Calculate message M = fee | lock_height.
18. Compute Schnorr challenge e = SHA256(kRG + kSG | xRG + xSG | M).
19. Verify sR by verifying kRG + e * xRG = sRG.
20. Compute Sender Schnorr signature sS = kS + e * xS.
21. Calculate final signature s = (kSG+kRG, sS+sR).
22. Calculate public key for s: xG = xRG + xSG.
23. Verify s against excess values in final transaction using xG.
24. Create Transaction Kernel Containing: Excess signature s, Public excess xG, fee, lock_height.
25. Create final transaction tx from Slate and Post tx to mempool.
26. Confirm receiver_output and Change status of receiver_output to "Confirmed".
27. Change status of inputs to "Spent" and Change status of change_output to "Confirmed".
28. Unlock inputs and delete change_output identified in transaction log entry TS.
