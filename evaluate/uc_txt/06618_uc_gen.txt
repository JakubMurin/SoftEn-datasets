1. Sender: Create Transaction UUID (for reference and maintaining correct state).
2. Sender: Set lock_height for transaction kernel (current chain height).
3. Sender: Select inputs using desired selection strategy.
4. Sender: Calculate sum inputs blinding factors xI.
5. Sender: Create change_output.
6. Sender: Select blinding factor xC for change_output.
7. Sender: Create lock function sF that locks inputs and stores change_output in wallet and identifying wallet transaction log entry TS linking inputs + outputs (Not executed at this point).
8. Sender: Calculate tx_weight: MAX(-1 * num_inputs + 4 * (num_change_outputs + 1), 1) (+1 covers a single output on the receiver's side).
9. Sender: Calculate fee: tx_weight * 1_000_000 nG.
10. Sender: Calculate total blinding excess sum for all inputs and outputs xS1 = xC - xI (private scalar).
11. Sender: Select a random nonce kS (private scalar).
12. Sender: Subtract random kernel offset oS from xS1. Calculate xS = xS1 - oS.
13. Sender: Multiply xS and kS by generator G to create public curve points xSG and kSG.
14. Sender: Add values to Slate for passing to other participants: UUID, inputs, change_outputs, fee, amount, lock_height, kSG, xSG, oS.
15. Sender -> Recipient: Slate.
16. Recipient: Check fee against number of inputs, change_outputs +1 * receiver_output.
17. Recipient: Create receiver_output.
18. Recipient: Choose random blinding factor for receiver_output xR (private scalar).
19. Recipient: Calculate message M = fee | lock_height.
20. Recipient: Choose random nonce kR (private scalar).
21. Recipient: Multiply xR and kR by generator G to create public curve points xRG and kRG.
22. Recipient: Compute Schnorr challenge e = SHA256(kRG + kSG | xRG + xSG | M).
23. Recipient: Compute Recipient Schnorr signature sR = kR + e * xR.
24. Recipient: Add sR, xRG, kRG to Slate.
25. Recipient: Create wallet output function rF that stores receiver_output in wallet with status "Unconfirmed" and identifying transaction log entry TR linking receiver_output with transaction.
26. Recipient -> Sender: Okay - Slate.
27. Sender: Create final transaction tx from Slate.
28. Sender -> Grin Node: Post tx to mempool.
29. Grin Node -> Recipient: "Ok".
30. Recipient -> Sender: "Ok" - UUID.
31. Sender -> Sender: Execute wallet lock function sF ...Await confirmation...
32. Recipient -> Grin Node: Confirm receiver_output.
33. Recipient -> Recipient: Change status of receiver_output to "Confirmed".
34. Sender -> Grin Node: Confirm change_output.
35. Sender -> Sender: Change status of inputs to "Spent".
36. Sender -> Sender: Change status of change_output to "Confirmed".
37. Recipient -> Recipient: Manually remove receiver_output from wallet using transaction log entry TR.
38. Recipient -> Sender: Error.
39. Sender -> Sender: Unlock inputs and delete change_output identified in transaction log entry TS.
40. Sender -> Sender: Create Transaction Kernel Containing: Excess signature s, Public excess xG, fee, lock_height.
