1. Create Transaction UUID (for reference and maintaining correct state) - Sender.
2. Set lock_height for transaction kernel (current chain height) - Sender.
3. Select inputs using desired selection strategy - Sender.
4. Calculate sum inputs blinding factors xI - Sender.
5. Create change_output - Sender.
6. Select blinding factor xC for change_output - Sender.
7. Create lock function sF that locks inputs and stores change_output in wallet and identifying wallet transaction log entry TS linking inputs + outputs (Not executed at this point) - Sender.
8. Calculate tx_weight: MAX(-1 * num_inputs + 4 * (num_change_outputs + 1), 1) (+1 covers a single output on the receiver's side) - Sender.
9. Calculate fee: tx_weight * 1_000_000 nG - Sender.
10. Calculate total blinding excess sum for all inputs and outputs xS1 = xC - xI (private scalar) - Sender.
11. Select a random nonce kS (private scalar) - Sender.
12. Subtract random kernel offset oS from xS1. Calculate xS = xS1 - oS - Sender.
13. Multiply xS and kS by generator G to create public curve points xSG and kSG - Sender.
14. Add values to Slate for passing to other participants: UUID, inputs, change_outputs, fee, amount, lock_height, kSG, xSG, oS - Sender.
15. Check fee against number of inputs, change_outputs +1 * receiver_output - Recipient.
16. Create receiver_output - Recipient.
17. Choose random blinding factor for receiver_output xR (private scalar) - Recipient.
18. Calculate message M = fee | lock_height - Recipient.
19. Choose random nonce kR (private scalar) - Recipient.
20. Multiply xR and kR by generator G to create public curve points xRG and kRG - Recipient.
21. Compute Schnorr challenge e = SHA256(kRG + kSG | xRG + xSG | M) - Recipient.
22. Compute Recipient Schnorr signature sR = kR + e * xR - Recipient.
23. Add sR, xRG, kRG to Slate - Recipient.
24. Create wallet output function rF that stores receiver_output in wallet with status "Unconfirmed" and identifying transaction log entry TR linking receiver_output with transaction - Recipient.
25. Calculate message M = fee | lock_height - Sender.
26. Compute Schnorr challenge e = SHA256(kRG + kSG | xRG + xSG | M) - Sender.
27. Verify sR by verifying kRG + e * xRG = sRG - Sender.
28. Compute Sender Schnorr signature sS = kS + e * xS - Sender.
29. Calculate final signature s = (kSG+kRG, sS+sR) - Sender.
30. Calculate public key for s: xG = xRG + xSG - Sender.
31. Verify s against excess values in final transaction using xG - Sender.
32. Create Transaction Kernel Containing: Excess signature s, Public excess xG, fee, lock_height - Sender.
33. Create final transaction tx from Slate - Sender.
34. Post tx to mempool - Sender.
35. Confirm receiver_output - Recipient.
36. Change status of receiver_output to "Confirmed" - Recipient.
37. Change status of inputs to "Spent" - Sender.
38. Change status of change_output to "Confirmed" - Sender.
