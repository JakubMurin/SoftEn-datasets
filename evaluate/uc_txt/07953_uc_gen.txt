1. Create Transaction UUID (for reference and maintaining correct state).
2. Set lock_height for transaction kernel (current chain height).
3. Select inputs using desired selection strategy.
4. Calculate sum inputs blinding factors xI.
5. Create change_output.
6. Select blinding factor xC for change_output.
7. Create lock function sF that locks inputs and stores change_output in wallet and identifying wallet transaction log entry TS linking inputs + outputs (Not executed at this point).
8. Calculate tx_weight: MAX(-1 * num_inputs + 4 * (num_change_outputs + 1), 1).
9. Calculate fee:  tx_weight * 1_000_000 nG.
10. Calculate total blinding excess sum for all inputs and outputs xS1 = xC - xI (private scalar).
11. Select a random nonce kS (private scalar).
12. Subtract random kernel offset oS from xS1. Calculate xS = xS1 - oS.
13. Multiply xS and kS by generator G to create public curve points xSG and kSG.
14. Add values to Slate for passing to other participants: UUID, inputs, change_outputs, fee, amount, lock_height, kSG, xSG, oS.
15. (Recipient): Check fee against number of inputs, change_outputs +1 * receiver_output.
16. (Recipient): Create receiver_output.
17. (Recipient): Choose random blinding factor for receiver_output xR (private scalar).
18. (Recipient): Calculate message M = fee | lock_height.
19. (Recipient): Choose random nonce kR (private scalar).
20. (Recipient): Multiply xR and kR by generator G to create public curve points xRG and kRG.
21. (Recipient): Compute Schnorr challenge e = SHA256(kRG + kSG | xRG + xSG | M).
22. (Recipient): Compute Recipient Schnorr signature sR = kR + e * xR.
23. (Recipient): Add sR, xRG, kRG to Slate.
24. (Recipient): Create wallet output function rF that stores receiver_output in wallet with status "Unconfirmed" and identifying transaction log entry TR linking receiver_output with transaction.
25. (Sender): Calculate message M = fee | lock_height.
26. (Sender): Compute Schnorr challenge e = SHA256(kRG + kSG | xRG + xSG | M).
27. (Sender): Verify sR by verifying kRG + e * xRG = sRG.
28. (Sender): Compute Sender Schnorr signature sS = kS + e * xS.
29. (Sender): Calculate final signature s = (kSG+kRG, sS+sR).
30. (Sender): Calculate public key for s: xG = xRG + xSG.
