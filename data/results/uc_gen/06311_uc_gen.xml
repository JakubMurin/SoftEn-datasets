<useCase id="Epic Transaction Workflow">
    <name>Current Epic Transaction Workflow</name>
        
    <actors>
        <actor>Sender</actor>
        <actor>Recipient</actor>
        <actor>Epic Node</actor>
    </actors>
    
    <mainSequence>
        <step id="S1">Create Transaction UUID (for reference and maintaining correct state) in Sender's wallet</step>
        <step id="S2">Set lock_height for transaction kernel (current chain height)</step>
        <step id="S3">Select inputs using desired selection strategy</step>
        <step id="S4">Calculate sum inputs blinding factors xI</step>
        <step id="S5">Create change_output</step>
        <step id="S6">Select blinding factor xC for change_output</step>
        <step id="S7">Create lock function sF that locks inputs and stores change_output in wallet and identifies wallet transaction log entry TS linking inputs + outputs</step>
        <step id="S8">Calculate tx_weight: MAX(-1 * num_inputs + 4 * (num_change_outputs + 1), 1)</step>
        <step id="S9">Calculate fee: tx_weight * 1,000,000 nG</step>
        <step id="S10">Calculate total blinding excess sum for all inputs and outputs xS1 = xC - xI (private scalar)</step>
        <step id="S11">Select a random nonce kS (private scalar)</step>
        <step id="S12">Subtract random kernel offset oS from xS1. Calculate xS = xS1 - oS</step>
        <step id="S13">Multiply xS and kS by generator G to create public curve points xSG and kSG</step>
        <step id="S14">Add values to Slate for passing to other participants: UUID, inputs, change_outputs, fee, amount, lock_height, kSG, xSG, oS</step>
        
        <step id="S15">Recipient checks fee against number of inputs, change_outputs, and receiver_output</step>
        <step id="S16">Recipient creates receiver_output</step>
        <step id="S17">Recipient chooses random blinding factor xR for receiver_output</step>
        <step id="S18">Recipient calculates message M = fee | lock_height</step>
        <step id="S19">Recipient chooses random nonce kR</step>
        <step id="S20">Recipient multiplies xR and kR by generator G to create public curve points xRG and kRG</step>
        <step id="S21">Recipient computes Schnorr challenge e = SHA256(kRG + kSG | xRG + xSG | M)</step>
        <step id="S22">Recipient computes Recipient Schnorr signature sR = kR + e * xR</step>
        
        <step id="S23">Sender finalizes transaction: Calculates message M = fee | lock_height</step>
        <step id="S24">Sender computes Schnorr challenge e = SHA256(kRG + kSG | xRG + xSG | M)</step>
        <step id="S25">Sender verifies sR by verifying kRG + e * xRG = sRG</step>
        <step id="S26">Sender computes Sender Schnorr signature sS = kS + e * xS</step>
        <step id="S27">Sender calculates final signature s = (kSG+kRG, sS+sR)</step>
        <step id="S28">Sender calculates public key for s: xG = xRG + xSG</step>
        <step id="S29">Sender verifies s against excess values in final transaction using xG</step>
        <step id="S30">Sender creates Transaction Kernel Containing: Excess signature s, Public excess xG, fee, lock_height</step>
        
        <step id="S31">Sender creates final transaction tx from Slate</step>
        <step id="S32">Sender posts tx to mempool via Epic Node</step>
        <step id="S33">Epic Node responds with confirmation</step>
        
        <step id="S34">Recipient confirms receiver_output and changes status to "Confirmed"</step>
        <step id="S35">Sender changes status of inputs to "Spent" and status of change_output to "Confirmed"</step>
        
        <step id="S36">Recipient manually removes receiver_output from wallet using transaction log entry TR (in case of error)</step>
        <step id="S37">Sender unlocks inputs and deletes change_output identified in transaction log entry TS (in case of error)</step>
    </mainSequence>
    
</useCase>
