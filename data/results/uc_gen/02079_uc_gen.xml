<useCase id="UC001">
    <name>Connect to Bootstrap</name>
    <actors>
        <actor>Actor</actor>
    </actors>
    <mainSequence>
        <step id="S1">Actor connects to Bootstrap</step>
        <step id="S2">Bootstrap validates connection</step>
        <step id="S3">Bootstrap resolves and connects</step>
        <step id="S4">Bootstrap initializes and registers</step>
        <step id="S5">Bootstrap initializes</step>
        <step id="S6">Bootstrap creates pipeline for channel</step>
        <step id="S7">Bootstrap adds handler to pipeline</step>
        <step id="S8">Bootstrap sets channel options</step>
        <step id="S9">Bootstrap sets attributes</step>
        <step id="S10">AbstractBootstrap registers with SingleThreadEventLoop</step>
        <step id="S11">SingleThreadEventLoop registers with AbstractChannel.AbstractUnsafe</step>
        <step id="S12">AbstractChannel.AbstractUnsafe registers</step>
        <step id="S13">AbstractChannel.AbstractUnsafe registers0</step>
        <step id="S14">AbstractNioChannel registers with ops=0</step>
        <step id="S15">DefaultChannelPipeline invokes handler added if needed</step>
        <step id="S16">DefaultChannelPipeline fires channel registered</step>
        <step id="S17">AbstractChannel.AbstractUnsafe fires channel active</step>
        <step id="S18">Bootstrap resolves and connects0</step>
        <step id="S19">AbstractChannel connects</step>
        <step id="S20">DefaultChannelPipeline connects</step>
        <step id="S21">AbstractChannelHandlerContext connects</step>
        <step id="S22">AbstractChannelHandlerContext invokes connect</step>
        <step id="S23">AbstractNioChannel.AbstractNioUnsafe connects</step>
        <step id="S24">AbstractNioChannel.AbstractNioUnsafe adds connection timeout callback</step>
    </mainSequence>
</useCase>
