<useCase id="1">
    <name>Current Epic Transaction Workflow</name>
    <description>Accurate as of Oct 10, 2018 - Master branch only</description>
    <actors>
        <actor>Sender</actor>
        <actor>Recipient</actor>
    </actors>
    <mainSequence>
        <step id="S1">Create Transaction UUID (for reference and maintaining correct state) and Set lock_height for transaction kernel (current chain height)</step>
        <step id="S2">Select inputs using desired selection strategy and Calculate sum inputs blinding factors xI</step>
        <step id="S3">Create change_output and Select blinding factor xC for change_output</step>
        <step id="S4">Create lock function sF that locks inputs and stores change_output in wallet and identifying wallet transaction log entry TS linking inputs + outputs (Not executed at this point)</step>
        <step id="S5">Calculate tx_weight: MAX(-1 * num_inputs + 4 * (num_change_outputs + 1), 1) and Calculate fee: tx_weight * 1_000_000 nG</step>
        <step id="S6">Calculate total blinding excess sum for all inputs and outputs xS1 = xC - xI (private scalar)</step>
        <step id="S7">Select a random nonce kS (private scalar) and Subtract random kernel offset oS from xS1. Calculate xS = xS1 - oS</step>
        <step id="S8">Multiply xS and kS by generator G to create public curve points xSG and kSG</step>
        <step id="S9">Add values to Slate for passing to other participants: UUID, inputs, change_outputs, fee, amount, lock_height, kSG, xSG, oS</step>
        <step id="S10">Check fee against number of inputs, change_outputs +1 * receiver_output</step>
        <step id="S11">Create receiver_output and Choose random blinding factor for receiver_output xR (private scalar)</step>
        <step id="S12">Calculate message M = fee | lock_height and Choose random nonce kR (private scalar)</step>
        <step id="S13">Multiply xR and kR by generator G to create public curve points xRG and kRG</step>
        <step id="S14">Compute Schnorr challenge e = SHA256(kRG + kSG | xRG + xSG | M)</step>
        <step id="S15">Compute Recipient Schnorr signature sR = kR + e * xR</step>
        <step id="S16">Add sR, xRG, kRG to Slate and Create wallet output function rF that stores receiver_output in wallet with status "Unconfirmed" and identifying transaction log entry TR linking receiver_output with transaction</step>
        <step id="S17">Calculate message M = fee | lock_height</step>
        <step id="S18">Compute Schnorr challenge e = SHA256(kRG + kSG | xRG + xSG | M)</step>
        <step id="S19">Verify sR by verifying kRG + e * xRG = sRG</step>
        <step id="S20">Compute Sender Schnorr signature sS = kS + e * xS</step>
        <step id="S21">Calculate final signature s = (kSG+kRG, sS+sR)</step>
        <step id="S22">Calculate public key for s: xG = xRG + xSG</step>
        <step id="S23">Verify s against excess values in final transaction using xG</step>
        <step id="S24">Create Transaction Kernel Containing: Excess signature s, Public excess xG, fee, lock_height</step>
        <step id="S25">Create final transaction tx from Slate and Post tx to mempool</step>
        <step id="S26">Confirm receiver_output and Change status of receiver_output to "Confirmed"</step>
        <step id="S27">Change status of inputs to "Spent" and Change status of change_output to "Confirmed"</step>
        <step id="S28">Unlock inputs and delete change_output identified in transaction log entry TS</step>
    </mainSequence>
</useCase>
