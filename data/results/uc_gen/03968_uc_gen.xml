<useCase id="UC001">
	<name>Access Control for Endpoint</name>
	<actors>
		<actor>ClientRequest</actor>
		<actor>Servlet</actor>
		<actor>Filter</actor>
		<actor>AuthCheck</actor>
		<actor>JWT</actor>
		<actor>Database</actor>
		<actor>Endpoint</actor>
	</actors>
	<preconditions>
		<precondition>ClientRequest initiates a request to access an endpoint.</precondition>
		<precondition>The roles required for accessing the endpoint are defined.</precondition>
	</preconditions>
	<mainSequence>
		<step id="S1">ClientRequest sends a request to Servlet specifying the endpoint.</step>
		<step id="S2">Servlet pre-processes the request using Filter.</step>
		<step id="S3">If the endpoint is for guests only, allow access and proceed with request.</step>
		<step id="S4">Perform endpoint operations if authorized role is required.</step>
		<step id="S5">Check if the Servlet session Principal is valid for the required role and authorization is not expired.</step>
		<step id="S6">Allow access and perform endpoint operations for authorized role.</step>
		<step id="S7">In case of no session or expired authorization, the AuthorizationCheck is performed.</step>
		<step id="S8">Check for JSESSIONIDSSO cookie in AuthorizationCheck.</step>
		<step id="S9">Request database specific roles for Single Sign-On principal in Database.</step>
		<step id="S10">Validate JWT in Authorization header in AuthCheck.</step>
		<step id="S11">Extract subject if JWT is valid in AuthCheck.</step>
		<step id="S12">Request user roles based on JWT subject in Database.</step>
		<step id="S13">Validate roles in Filter against endpoint roles.</step>
		<step id="S14">Perform endpoint operations if roles are valid.</step>
		<step id="S15">Reject access if roles are invalid.</step>
	</mainSequence>
</useCase>
