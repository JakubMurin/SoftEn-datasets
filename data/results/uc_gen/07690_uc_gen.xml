<useCase id="epic-transaction">
    <name>Current Epic Transaction Workflow</name>
    <actors>
        <actor>Sender</actor>
        <actor>Recipient</actor>
    </actors>
    <mainSequence>
        <step id="S1">Create Transaction UUID for reference and maintaining correct state</step>
        <step id="S2">Set lock_height for transaction kernel at current chain height</step>
        <step id="S3">Select inputs using desired selection strategy</step>
        <step id="S4">Calculate sum of inputs blinding factors xI</step>
        <step id="S5">Create change_output</step>
        <step id="S6">Select blinding factor xC for change_output</step>
        <step id="S7">Create lock function sF that locks inputs and stores change_output in wallet and identifying wallet transaction log entry TS linking inputs + outputs (Not executed at this point)  (Slate will be passed)</step>
        <step id="S8">Calculate tx_weight: MAX(-1 * num_inputs + 4 * (num_change_outputs + 1), 1) (1 covers a single output on the receiver's side)</step>
      <step id="S9">Calculate fee: tx_weight * 1_000_000 nG</step>
      <step id="S10">Calculate total blinding excess sum for all inputs and outputs xS1 = xC - xI (private scalar)</step>
      <step id="S11">Select a random nonce kS (private scalar)</step>
      <step id="S12">Subtract random kernel offset oS from xS1. Calculate xS = xS1 - oS</step>
      <step id="S13">Multiply xS and kS by generator G to create public curve points xSG and kSG</step>
      <step id="S14">Add values to Slate for passing to other participants: UUID, inputs, change_outputs, fee, amount, lock_height, kSG, xSG, oS</step>
        <step id="S15">Sender sends Slate to Recipient</step>
        <step id="S16">Recipient ensures fee and creates receiver_output</step>
        <step id="S17">Recipient chooses random blinding factor for receiver_output xR</step>
        <step id="S18">Recipient sends back signature data to Sender in the Slate</step>
        <step id="S19">Recipient executes wallet output function rF if all is Okay</step>
        <step id="S20">Sender finalizes transaction by constructing excess signatures, including Schnorr challenges, and verifies signatures</step>
        <step id="S21">Sender creates final transaction tx from Slate</step>
        <step id="S22">Sender posts tx to mempool</step>
        <step id="S23">Sender and Epic Node process finalization of the transaction</step>
    </mainSequence>
</useCase>
