<useCase id="GrinTransaction">
    <name>Grin Transaction Workflow</name>
    <actors>
        <actor>Sender</actor>
        <actor>Recipient</actor>
        <actor>Grin Node</actor>
    </actors>
    <mainSequence>
        <step id="S1">Sender: Create Transaction UUID (for reference and maintaining correct state)</step>
        <step id="S2">Sender: Set lock_height for transaction kernel (current chain height)</step>
        <step id="S3">Sender: Select inputs using desired selection strategy</step>
        <step id="S4">Sender: Calculate sum inputs blinding factors xI</step>
        <step id="S5">Sender: Create change_output</step>
        <step id="S6">Sender: Select blinding factor xC for change_output</step>
        <step id="S7">Sender: Create lock function sF that locks inputs and stores change_output in wallet and identifying wallet transaction log entry TS linking inputs + outputs (Not executed at this point)</step>
        <step id="S8">Sender: Calculate tx_weight: MAX(-1 * num_inputs + 4 * (num_change_outputs + 1), 1) (+1 covers a single output on the receiver's side)</step>
        <step id="S9">Sender: Calculate fee: tx_weight * 1_000_000 nG</step>
        <step id="S10">Sender: Calculate total blinding excess sum for all inputs and outputs xS1 = xC - xI (private scalar)</step>
        <step id="S11">Sender: Select a random nonce kS (private scalar)</step>
        <step id="S12">Sender: Subtract random kernel offset oS from xS1. Calculate xS = xS1 - oS</step>
        <step id="S13">Sender: Multiply xS and kS by generator G to create public curve points xSG and kSG</step>
        <step id="S14">Sender: Add values to Slate for passing to other participants: UUID, inputs, change_outputs, fee, amount, lock_height, kSG, xSG, oS</step>
        <step id="S15">Sender -> Recipient: Slate</step>
        <step id="S16">Recipient: Check fee against number of inputs, change_outputs +1 * receiver_output</step>
        <step id="S17">Recipient: Create receiver_output</step>
        <step id="S18">Recipient: Choose random blinding factor for receiver_output xR (private scalar)</step>
        <step id="S19">Recipient: Calculate message M = fee | lock_height</step>
        <step id="S20">Recipient: Choose random nonce kR (private scalar)</step>
        <step id="S21">Recipient: Multiply xR and kR by generator G to create public curve points xRG and kRG</step>
        <step id="S22">Recipient: Compute Schnorr challenge e = SHA256(kRG + kSG | xRG + xSG | M)</step>
        <step id="S23">Recipient: Compute Recipient Schnorr signature sR = kR + e * xR</step>
        <step id="S24">Recipient: Add sR, xRG, kRG to Slate</step>
        <step id="S25">Recipient: Create wallet output function rF that stores receiver_output in wallet with status "Unconfirmed" and identifying transaction log entry TR linking receiver_output with transaction</step>
        <step id="S26">Recipient -> Sender: Okay - Slate</step>
        <step id="S27">Sender: Create final transaction tx from Slate</step>
        <step id="S28">Sender -> Grin Node: Post tx to mempool</step>
        <step id="S29">Grin Node -> Recipient: "Ok"</step>
        <step id="S30">Recipient -> Sender: "Ok" - UUID</step>
        <step id="S31">Sender -> Sender: Execute wallet lock function sF ...Await confirmation...</step>
        <step id="S32">Recipient -> Grin Node: Confirm receiver_output</step>
        <step id="S33">Recipient -> Recipient: Change status of receiver_output to "Confirmed"</step>
        <step id="S34">Sender -> Grin Node: Confirm change_output</step>
        <step id="S35">Sender -> Sender: Change status of inputs to "Spent"</step>
        <step id="S36">Sender -> Sender: Change status of change_output to "Confirmed"</step>
        <step id="S37">Recipient -> Recipient: Manually remove receiver_output from wallet using transaction log entry TR</step>
        <step id="S38">Recipient -> Sender: Error</step>
        <step id="S39">Sender -> Sender: Unlock inputs and delete change_output identified in transaction log entry TS</step>
        <step id="S40">Sender -> Sender: Create Transaction Kernel Containing: Excess signature s, Public excess xG, fee, lock_height</step>
    </mainSequence>
</useCase>
