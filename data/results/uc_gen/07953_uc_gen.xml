<useCase id="UC001">
	<name>Grin Transaction Workflow</name>
	<actors>
		<actor>Sender</actor>
		<actor>Recipient</actor>
		<actor>Grin Node</actor>
	</actors>
	<mainSequence>
		<step id="S1">Create Transaction UUID (for reference and maintaining correct state)</step>
		<step id="S2">Set lock_height for transaction kernel (current chain height)</step>
		<step id="S3">Select inputs using desired selection strategy</step>
		<step id="S4">Calculate sum inputs blinding factors xI</step>
		<step id="S5">Create change_output</step>
		<step id="S6">Select blinding factor xC for change_output</step>
		<step id="S7">Create lock function sF that locks inputs and stores change_output in wallet and identifying wallet transaction log entry TS linking inputs + outputs (Not executed at this point)</step>
		<step id="S8">Calculate tx_weight: MAX(-1 * num_inputs + 4 * (num_change_outputs + 1), 1)</step>
		<step id="S9">Calculate fee:  tx_weight * 1_000_000 nG</step>
		<step id="S10">Calculate total blinding excess sum for all inputs and outputs xS1 = xC - xI (private scalar)</step>
		<step id="S11">Select a random nonce kS (private scalar)</step>
		<step id="S12">Subtract random kernel offset oS from xS1. Calculate xS = xS1 - oS</step>
		<step id="S13">Multiply xS and kS by generator G to create public curve points xSG and kSG</step>
		<step id="S14">Add values to Slate for passing to other participants: UUID, inputs, change_outputs, fee, amount, lock_height, kSG, xSG, oS</step>
		<step id="S15">(Recipient): Check fee against number of inputs, change_outputs +1 * receiver_output</step>
		<step id="S16">(Recipient): Create receiver_output</step>
		<step id="S17">(Recipient): Choose random blinding factor for receiver_output xR (private scalar)</step>
		<step id="S18">(Recipient): Calculate message M = fee | lock_height</step>
		<step id="S19">(Recipient): Choose random nonce kR (private scalar)</step>
		<step id="S20">(Recipient): Multiply xR and kR by generator G to create public curve points xRG and kRG</step>
		<step id="S21">(Recipient): Compute Schnorr challenge e = SHA256(kRG + kSG | xRG + xSG | M)</step>
		<step id="S22">(Recipient): Compute Recipient Schnorr signature sR = kR + e * xR</step>
		<step id="S23">(Recipient): Add sR, xRG, kRG to Slate</step>
		<step id="S24">(Recipient): Create wallet output function rF that stores receiver_output in wallet with status "Unconfirmed" and identifying transaction log entry TR linking receiver_output with transaction</step>
		<step id="S25">(Sender): Calculate message M = fee | lock_height</step>
		<step id="S26">(Sender): Compute Schnorr challenge e = SHA256(kRG + kSG | xRG + xSG | M)</step>
		<step id="S27">(Sender): Verify sR by verifying kRG + e * xRG = sRG</step>
		<step id="S28">(Sender): Compute Sender Schnorr signature sS = kS + e * xS</step>
		<step id="S29">(Sender): Calculate final signature s = (kSG+kRG, sS+sR)</step>
		<step id="S30">(Sender): Calculate public key for s: xG = xRG + xSG</step>
	</mainSequence>
</useCase>
