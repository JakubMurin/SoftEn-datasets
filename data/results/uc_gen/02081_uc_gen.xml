<useCase id="UC1">
    <name>Connect to Bootstrap</name>
    <actors>
        <actor>actor</actor>
    </actors>
    <mainSequence>
        <step id="S1">Actor connects to Bootstrap</step>
        <step id="S2">Bootstrap validates connection</step>
        <step id="S3">Bootstrap resolves and connects</step>
        <step id="S4">Bootstrap initializes and registers</step>
        <step id="S5">AbstractBootstrap initializes and registers</step>
        <step id="S6">ChannelFactory creates a new channel</step>
        <step id="S7">Bootstrap initializes</step>
        <step id="S8">SingleThreadEventLoop registers</step>
        <step id="S9">AbstractChannel.AbstractUnsafe registers</step>
        <step id="S10">AbstractChannel.AbstractUnsafe registers asynchronously</step>
        <step id="S11">AbstractChannel.AbstractUnsafe registers 0</step>
        <step id="S12">AbstractNioChannel registers SelectableChannel</step>
        <step id="S13">DefaultChannelPipeline invokes handler if needed</step>
        <step id="S14">DefaultChannelPipeline fires channel registered event</step>
        <step id="S15">DefaultChannelPipeline fires channel active event</step>
        <step id="S16">Bootstrap resolves and connects asynchronously</step>
        <step id="S17">AbstractChannel does connect</step>
        <step id="S18">DefaultChannelPipeline connects</step>
        <step id="S19">AbstractChannelHandlerContext connects</step>
        <step id="S20">AbstractNioChannel.AbstractNioUnsafe connects</step>
        <step id="S21">AbstractNioChannel.AbstractNioUnsafe finishes connect</step>
        <step id="S22">DefaultChannelPipeline fires channel active event</step>
        <step id="S23">AbstractNioChannel.AbstractNioUnsafe adds connection timeout callback</step>
    </mainSequence>
</useCase>
