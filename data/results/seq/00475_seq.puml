@startuml

' client
Actor user
Participant client #Gold

' api
Participant "server" as api #LightSalmon
database "db" as db #LightSalmon

' title
title <font size=30>/v1/rooms</font>

' prerequisites
user -> client  : 로그인
client -> api : jwt
return ok {"Authorization": "56E7E522C3..."}

note right of user
현재 과정 모두 진행된 상태에서 아래 시퀀스들이 진행됩니다.
endnote
||20||

== POST /v1/rooms/<:room_id>/join  교환일기방 참여 및 code 검증 ==
user -> client: 다이어리방 참여코드 입력
client -> api++: **POST /v1/rooms/<:room_id>/join**

note right of client #Lavender
{
    "code": <사용자가 작성한 코드>
}
endnote
api -> api: json validation
api -> db++: Get a room code
return code
api -> api: verify(사용자작성코드, code)
alt#Gold #LightBlue Successful case
    api -> db++: Insert Account to RoomMember
    return ok
    api -> db++: Append AccountID to Room.Orders
    return ok
    api -> client: **201 Created**
else #Pink Failure
    return  **401 Unauthorized**
end

||20||
== PATCH /v1/rooms/<:room_id>  교환일기방 참여코드 재설정==
user -> client++: 방장설정화면 클릭
note right of client
**GET /v1/rooms/<:room_id>교환일기방 상세화면** 에서 얻은 **isMaster**필드를 사용해
방장 설정화면의 접근권한을 체크합니다.
endnote
return 방장설정화면
user -> client++: 방장설정화면 > "비밀번호 변경" 클릭
client -> client: 참여코드 재설정 "완료" 클릭
client -> api++: **PATCH /v1/rooms/<:room_id>**
note right of client #Lavender
{
    "code": 참여코드
    "hint": 참여코드 힌트
}
endnote
api -> db++: 마스터 여부 확인
return isMaster (bool)
alt#Gold #LightBlue Successful case
    api -> db++: room update
    return ok
    api -> client: **204 No Content**
else #Pink Failure
   return **401 Unauthorized**
end
return 

||20||
== PATCH /v1/rooms/<:room_id>  교환일기방 작성기한 재설정==
user -> client++: 방장설정화면 클릭
note right of client
**GET /v1/rooms/<:room_id>교환일기방 상세화면** 에서 얻은 **isMaster**필드를 사용해
방장 설정화면의 접근권한을 체크합니다.
endnote
return 방장설정화면
user -> client++: 방장설정화면 > "작성기한" 클릭
note right of client
**GET /v1/rooms/<:room_id>교환일기방 상세화면** 에서 얻은 **period 필드**를 사용해
방장 설정화면의 "작성기한"을 렌더링해줍니다.
endnote
client -> client: 작성기한 변경 후 확인 클릭
client -> api++: **PATCH /v1/rooms/<:room_id>**
note right of client #Lavender
{
    "period": 작성기한
}
endnote
api -> db++: 마스터 여부 확인
return isMaster (bool)
alt#Gold #LightBlue Successful case
    api -> db++: room update
    return ok
    api -> client: **204 No Content**
else #Pink Failure
   return **401 Unauthorized**
end
return 

||20||
== PATCH /v1/rooms/<:room_id>  교환일기방 다이어리 작성 순서 변경==
user -> client++: 방장설정화면 클릭
note right of client
**GET /v1/rooms/<:room_id>교환일기방 상세화면** 에서 얻은 **isMaster**필드를 사용해
방장 설정화면의 접근권한을 체크합니다.
endnote
return 방장설정화면
user -> client++: 방장설정화면 > "작성순서변경" 클릭
note right of client
**GET /v1/rooms/<:room_id>교환일기방 상세화면** 에서 얻은 **members 필드**를 사용해
방장 설정화면의 "작성순서" 리스트를 렌더링해줍니다.
endnote

client -> client: 작성순서 변경 후 "완료" 클릭
client -> api++: **PATCH /v1/rooms/<:room_id>**
note right of client #Lavender
{
    "members": [
        "1번 accountId",
        "2번 accountId",
        "3번 accountId",
        "4번 accountId",
        ...
    ]
}
endnote
api -> db++: 마스터 여부 확인
return isMaster (bool)
alt#Gold #LightBlue Successful case
    api -> db++: room update
    return ok
    api -> client: **204 No Content**
else #Pink Failure
   return **401 Unauthorized**
end
return 

||20||
@enduml
