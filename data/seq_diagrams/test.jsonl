{"title": "", "actors": 0, "num_of_participats": 5, "repo": "pulumi/pulumi", "diagram_source_url": "https://raw.githubusercontent.com/pulumi/pulumi/4fee2766e1ab745ab3d0f28a4f9537128a432b40/developer-docs/architecture/same.uml", "sequence_diagram": "@startuml\nparticipant \"Language SDK\" order 10\nbox \"Engine\"\nparticipant \"Resource Monitor\" order 15\nparticipant \"Step Generator\" order 20\nparticipant \"Step Executor\" order 25\nend box\nparticipant \"Resource Provider\" order 30\n\n\"Language SDK\" -> \"Resource Monitor\" ++ : RegisterResourceRequest(type, name, inputs, options)\n\"Resource Monitor\" -> \"Step Generator\" ++ : RegisterResourceEvent(type, name, inputs, options)\n\"Step Generator\" -> \"Resource Provider\" ++ : CheckRequest(type, inputs, old inputs)\n\"Step Generator\" <- \"Resource Provider\" -- : CheckResponse(inputs', failures)\n\"Step Generator\" -> \"Resource Provider\" ++ : DiffRequest(type, inputs', old state)\n\"Step Generator\" <- \"Resource Provider\" -- : DiffResponse(diffs)\n\"Step Generator\" -> \"Step Executor\" --++ : SameStep(inputs', old state, options)\nnote left\n\tThis is fire-and-forget on the part of the step generator.\n\tThe step will run in parallel with steps for other resources.\nend note\n\"Resource Monitor\" <- \"Step Executor\" -- : done(old state)\n\"Language SDK\" <- \"Resource Monitor\" -- : RegisterResourceResponse(urn, ID, old tate)\n@enduml\n"}
{"title": "", "actors": 0, "num_of_participats": 3, "repo": "aklt/plantuml-syntax-test", "diagram_source_url": "https://raw.githubusercontent.com/aklt/plantuml-syntax-test/daca74052f6a36b58e043ab113b55c4a409a09ea/uml/reference_01-02-3_Declaring-participant.uml", "sequence_diagram": "@startuml\nparticipant Last order 30\nparticipant Middle order 20\nparticipant First order 10\n@enduml\n"}
{"title": "", "actors": 0, "num_of_participats": 3, "repo": "wamp-proto/wamp-proto", "diagram_source_url": "https://raw.githubusercontent.com/wamp-proto/wamp-proto/39dd5fbd97d06982fb0025759f12f099e76c3dd7/rfc/diagrams/subscribe.uml", "sequence_diagram": "@startuml\nparticipant Publisher\nparticipant Broker\nparticipant Subscriber\n\nSubscriber -> Broker : SUBSCRIBE\nBroker -> Subscriber : SUBSCRIBED or ERROR\nSubscriber -> Broker : UNSUBSCRIBE\nBroker -> Subscriber : UNSUBSCRIBED or ERROR\n@enduml"}
{"title": "", "actors": 0, "num_of_participats": 4, "repo": "imixs/imixs-workflow", "diagram_source_url": "https://raw.githubusercontent.com/imixs/imixs-workflow/b73a62db06923953d7f1239ee9e2920397f58bf3/src/site/resources/uml/plugin_api.uml", "sequence_diagram": "@startuml\n\n \n\n\nparticipant WorkflowKernel order 1\nparticipant Model order 2\ncollections Plugin order 50\ncollections Service order 99\n\nbox \"Workflow Engine\" #White\n\tparticipant WorkflowKernel \n\tparticipant Model\n\tparticipant Plugin\n\nend box\n\nbox \"Microservice\" #LightBlue\n\tparticipant Service\nend box\n\nhide footbox\n\nactivate WorkflowKernel\n\nWorkflowKernel -> WorkflowKernel: register Plug-In \n\nWorkflowKernel -> Model: load BPMN Event\nactivate Model\nModel --> WorkflowKernel:\ndeactivate Model\n\n\n\nWorkflowKernel -> Plugin: init Plug-In\nactivate Plugin\nWorkflowKernel -> Plugin: run Plug-In\n\nPlugin -->o Service: external API Call\nactivate Service\nService --> Plugin\ndeactivate Service\n\nWorkflowKernel -> Plugin: close Plug-In\ndeactivate Plugin\n\n\n\ndeactivate WorkflowKernel\n\n@enduml\n"}
{"title": "", "actors": 0, "num_of_participats": 3, "repo": "apache/trafficserver", "diagram_source_url": "https://raw.githubusercontent.com/apache/trafficserver/669cfcc1b97b1031ed5f4c1a5619456c84b11456/doc/uml/l4-pre-warming-overview.uml", "sequence_diagram": "' Licensed under the Apache License, Version 2.0 (the \"License\");\n' you may not use this file except in compliance with the License.\n' You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n' Unless required by  applicable law or agreed to in writing, software distributed under the License is distributed\n' on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n' See the License for the specific language governing permissions and limitations under the License.\n\n@startuml\n'title Pre-warm TLS Tunnel\nskinparam sequenceMessageAlign direction\nskinparam ParticipantPadding 75\n'skinparam monochrome reverse\nskinparam backgroundColor #white\nhide footbox\n\nparticipant client\nparticipant proxy\nparticipant origin_server\n\ngroup pre-warm connection pool\n  proxy -> origin_server : open connection\n  proxy -> origin_server : open connection\n  proxy -> origin_server : open connection\n  ...\nend\n...\ngroup pool size > 0\n  client -> proxy : open connection\n  hnote over proxy #white: use pre-warmed connection from pool\n  rnote over client, origin_server #lightgreen: TLS Partial Blind Tunnel\nend\n@enduml\n"}
{"title": "", "actors": 1, "num_of_participats": 5, "repo": "projectcontour/contour", "diagram_source_url": "https://raw.githubusercontent.com/projectcontour/contour/8a60b0d1656f11a7cb3d92a05da95c84464274b3/site/themes/contour/static/img/uml/client-auth-sequence-ext.uml", "sequence_diagram": "@startuml\n\nactor Client\nparticipant Envoy\nparticipant \"Authorization Server\"\nparticipant \"Authorization Provider\"\nparticipant \"Application Server\"\n\nClient -> Envoy: HTTP request\nactivate Envoy\n\nEnvoy -> \"Authorization Server\": Check request\nactivate \"Authorization Server\"\n\n\"Authorization Server\" -> \"Authorization Provider\": Authorization request\nactivate \"Authorization Provider\"\n\"Authorization Provider\" -> \"Authorization Provider\": Authorize request\n\"Authorization Provider\" -> \"Authorization Server\": Authorization response (approved)\ndeactivate \"Authorization Provider\"\n\n\"Authorization Server\" -> Envoy: Check response (approved)\ndeactivate \"Authorization Server\"\n\nEnvoy -> \"Application Server\": HTTP request\nactivate \"Application Server\"\n\"Application Server\" -> \"Application Server\": Process request\n\"Application Server\" -> Envoy: HTTP response\ndeactivate \"Application Server\"\n\nEnvoy -> Client: HTTP response\ndeactivate Envoy\n\n@enduml\n"}
{"title": "Authentication in Dataverse 4.0", "actors": 1, "num_of_participats": 7, "repo": "IQSS/dataverse", "diagram_source_url": "https://raw.githubusercontent.com/IQSS/dataverse/6e3a25050fb36951215808f0187c347797af60be/doc/Architecture/userLogin.uml", "sequence_diagram": "@startuml\n\ntitle Authentication in Dataverse 4.0\nautonumber \"<font color=blue>\"\n\nactor User\nparticipant AuthSystem as \"AuthSystem\\nMay be external\"\nbox \"DataverseSystem\" #DDD\n  participant DataverseUI\n  participant AuthenticationManager\n  participant AuthenticationProvider\n  participant UserBean\n  database db\nend box\n\n== Pick IDP ==\nUser --> DataverseUI : GET /\nUser <-- DataverseUI : \"Select Login System\"\nUser --> DataverseUI : authSystem\nDataverseUI --> AuthenticationManager: get( authSystem )\nDataverseUI <-- AuthenticationManager: authSystem\nUser <-- DataverseUI: redirect to authSystem\n\n== Authenticate ==\n\nUser --> AuthSystem : credentials\nUser <-- AuthSystem : Ok, back to DataverseUI\nUser --> DataverseUI : autenticated( data )\n\n== Log in == \n\nDataverseUI --> AuthenticationProvider: getUserObj( data )\nDataverseUI <-- AuthenticationProvider: userObj\nDataverseUI --> UserBean : setUser( userObj )\nUserBean --> db : lookupAuthenticatedUser( userObj.id )\n\nalt id found\n  UserBean <-- db : authenticatedUser\n  UserBean --> db : update( authenticatedUser, userObj )\n\nelse id not found\n  UserBean <-- db : \"user not found\"\n  UserBean --> db : createAuthenticatedUser( userObj )\n  UserBean <-- db : authenticatedUser\n  UserBean --> db : updateLookupTable( userObj.id, authenticatedUser.id )\nend\n\n@enduml"}
{"title": "TKEY Exchange (GSS-TSIG hook)", "actors": 0, "num_of_participats": 2, "repo": "isc-projects/kea", "diagram_source_url": "https://raw.githubusercontent.com/isc-projects/kea/a7bcf01ace24615b2c03b47aa84eee5b3380cf7e/doc/sphinx/uml/tkey.uml", "sequence_diagram": "@startuml\n\ntitle TKEY Exchange (GSS-TSIG hook)\n\nparticipant \"Kea D2 server\" as Kea\nparticipant \"DNS server\" as DNS\n\nKea -> DNS: TKEY request\nDNS -> Kea: TKEY response (signed)\n\n@enduml\n"}
{"title": "", "actors": 0, "num_of_participats": 4, "repo": "w3c/wot-scripting-api", "diagram_source_url": "https://raw.githubusercontent.com/w3c/wot-scripting-api/3114d8d4acbdeb304341b4b41587429412185faa/applications/script-manager/ManagerThing2.uml", "sequence_diagram": "@startuml\nparticipant Script_repo\nparticipant ManagerThing\nparticipant Execution_area\nparticipant ConsumedThing\n\nConsumedThing -> ManagerThing: invokeAction(\"install\",...\nManagerThing -> Script_repo: get script\nManagerThing <-- Script_repo: script\nExecution_area <-- ManagerThing: install script\n\nConsumedThing -> ManagerThing: invokeAction(\"run\",...\nManagerThing -> Execution_area: execute script\n\nConsumedThing -> ManagerThing: invokeAction(\"stop\",...\nManagerThing -> Execution_area: stop executing script\n\nConsumedThing -> ManagerThing: invokeAction(\"uninstall\",...\nManagerThing -> Execution_area: uninstall script\n@enduml\n"}
{"title": "", "actors": 0, "num_of_participats": 3, "repo": "casper-network/ceps", "diagram_source_url": "https://raw.githubusercontent.com/casper-network/ceps/998c947b55d1c07445458175ae5e37b1dfdfc9f4/text/images/0019/fork_spam.uml", "sequence_diagram": "/' -*- mode: plantuml; -*- '/\n\n@startuml\n\nparticipant Equivocator\nparticipant Node as \"Honest Node\"\ndatabase State as \"Protocol State\"\n\nEquivocator -> Node: Vote Spam #1\nNode -> State: Vote Spam #1 (Stored)\n\nEquivocator -> Node: Vote Spam #2\nNode -> State: Vote Spam #2 (Stored)\n\nEquivocator -> Node: Vote Spam #3\nNode -> State: Vote Spam #3 (Stored)\n\n... ...\n\nEquivocator -> Node: Vote Spam #10000000000\nNode -> State: Vote Spam #10000000000 (Stored)\n\n@enduml\n\n/' Local Variables: '/\n/' plantuml-output-type: png '/\n/' End: '/\n"}
{"title": "", "actors": 0, "num_of_participats": 4, "repo": "nismod/smif", "diagram_source_url": "https://raw.githubusercontent.com/nismod/smif/c0a3a126a1891dc90f3dde0351acef727be96ff5/docs/uml/sequence.uml", "sequence_diagram": "@startuml\n\nparticipant Reader\nparticipant Builder\nparticipant ResolutionManager\nparticipant SectorModel\n\nBuilder --> Reader : get_model_inputs()\nReader --> Builder : model_inputs\nloop for (name, spatial_name, temporal_name) in model_inputs\n    Builder --> ResolutionManager : get_spatial_resolution(spatial_name)\n    Builder --> ResolutionManager : get_temporal_resultion(temporal_name)\n    ResolutionManager --> Builder : spatial_temporal_resolution\n    Builder --> SectorModel : add_model_input(ModelInput)\nend\n@enduml"}
{"title": "", "actors": 0, "num_of_participats": 5, "repo": "cookpad/rrrspec", "diagram_source_url": "https://raw.githubusercontent.com/cookpad/rrrspec/a5bde2b062ce68b1e32b8caddf194389c2ce28b0/docs/sequence_setup_failed.uml", "sequence_diagram": "@startuml\nbox \"Master\"\n  database Database\n  participant Arbiter\nend box\nbox \"Worker\"\n  participant Slave\n  participant RespawnedSlave\n  participant Worker\nend box\nactivate Worker\n\n== Testing ==\n\ncreate Slave\nWorker->Slave : Spawn slaves\nactivate Slave\nSlave->Slave : Slave setup\ndestroy Slave\n\nWorker->Database : Add a slave log\ncreate RespawnedSlave\nWorker->RespawnedSlave : Respawn a slave\nactivate RespawnedSlave\nRespawnedSlave->RespawnedSlave : Slave setup\n\n...\n\nalt slaves are frequently failed\n  Worker->Arbiter : Fail request\n  Arbiter->Database : Mark the taskset as failed\n  Database->Worker : Notify the taskset is marked as failed\n  Worker->RespawnedSlave : Kill slaves\n  deactivate RespawnedSlave\nend alt\n\n@enduml\n"}
{"title": "", "actors": 0, "num_of_participats": 7, "repo": "vilnius/vilnius-carpool", "diagram_source_url": "https://raw.githubusercontent.com/vilnius/vilnius-carpool/a4813f4db1fd9a9a9b3c357c2769c08a505dd184/docs/7sq-uc8.1-post-trip.uml", "sequence_diagram": "@startuml\n\nparticipant controller as \"RouteController\"\nparticipant template as \"Template\"\nparticipant view as \"MapView\"\nparticipant trip as \"Trip\"\nparticipant location as \"Location\"\nparticipant service as \"Service\"\nparticipant google as \"GoogleService\"\n\n\ncreate trip\nview -> trip: currentTrip\ncreate location\ntrip -> location\n\ncontroller -> service: getActiveTrips\ncontroller -> service: getStops\ncontroller -> view: trip\ncontroller -> template: data(currentTrip, activeTrips, stops)\n\n[-> template: rendered\nactivate template\n  template -> view: showMap\n  template -> google: addAutocomplete(input, view.setCurrentTripTo)\ndeactivate template\n\ntemplate -\\ view: data\nactivate view\n  template \\-- view: trip\ndeactivate view\ntemplate -> trip: getFromAddress\n\nalt Set from location from browser\n  [-> view: setCurrentTripFrom(latlng, null)\n  activate view\n  view -> view: clarifyLocation(latlng, null)\n  activate view\n  view -\\ google: geocode(latlng, trip.from.setAddress)\n  alt reactive\n    view -> location: setLatLng\n    template -> location: getLatLng\n  end\n  deactivate view\n  deactivate view\n  alt reactive\n    location \\-- google: setAddress\n    activate location\n    template -> location: getAddress\n    deactivate location\n  end\nend\n\nalt Autocomplete address\n  [-> google: typeahead toAddress\n  view <- google: setCurrentTripTo(latlng, address)\n  activate view\n  view -> view: clarifyLocation(latlng, address)\n  activate view\n  view -> location: setLatLng\n  view -> location: address\n  deactivate view\n  deactivate view\nend\n\nalt Drop marker\n  view -> view: setCurrentTripTo(latlng, null)\n  note left: when to update address?\n  activate view\n  view -> view: clarifyLocation(latlng, null)\n  activate view\n  view -\\ google: geocode(latlng, trip.to.setAddress)\n  alt reactive\n    view -> location: setLatLng\n    template -> location: getLatLng\n  end\n  deactivate view\n  deactivate view\n  alt reactive\n    location \\-- google: setAddress\n    activate location\n    template -> location: getAddress\n    deactivate location\n  end\nend\n\n[-> template: click .saveTrip\ntemplate -> service: saveTrip(trip)\nservice -> service: Are to / from locations set?\n\n@enduml\n"}
{"title": "", "actors": 0, "num_of_participats": 3, "repo": "moremoban/yehua", "diagram_source_url": "https://raw.githubusercontent.com/moremoban/yehua/e90ac103ec28e1101fd845796c02083d52ddf43e/docs/source/yehua-story.uml", "sequence_diagram": "@startuml\n\nParticipant \"Project Template\" as T1\nParticipant \"Awesome Template\" as T2\nParticipant \"Nth Generated Project\" as G\n\nT1 --> G : yehua generate\nG --> G: development starts\ngroup continuous templating\nT1 --> T1 : new features added\nT1 --> G : moban synchronize\nG --> G : development continues\nend\ngroup no limit on the numer of source templates\nG --> G : add another awesome template\nT2 --> G: moban synchronize\nT1 --> T1: bug fix\nT1 --> G: moban synchronize\nT2 --> T2: a typo correction\nT2 --> G: moban synchornize\nend\n\n@enduml"}
{"title": "", "actors": 0, "num_of_participats": 4, "repo": "klarna-incubator/kflow", "diagram_source_url": "https://raw.githubusercontent.com/klarna-incubator/kflow/9acdc6df73f300afcec9c051b8baf6e6da69205c/doc/images/callback_failure.uml", "sequence_diagram": "@startuml\n\nparticipant \"kfnode N-1\\n(upstream)\" as upstream\nparticipant \"kfnode N\" as kfnode\nparticipant \"kfnode N+1\\n(downstream)\" as downstream\n\nactivate kfnode\nactivate upstream\nactivate downstream\n\nhnote over kfnode : ready\nupstream -> kfnode : ?feed(Ref1, Msg1)\n\ngroup Process message from the upstream\n  hnote over kfnode : working\n  kfnode --> worker ** : spawn_link\n  activate worker\n  worker -\\ worker : Module:handle_upstream_message(Msg1)\n  kfnode <- worker : ?done(nok)\n  destroy worker\nend\n\nhnote over kfnode : exiting\n\nkfnode -> upstream : ?downstream_failure\nupstream -\\ upstream : handle_downstream_failure\ndestroy upstream\n\ngroup Feed messages to the downstream\n  note over kfnode\n    Suppose we had Msg1 and\n    Msg2 already in the queue\n  end note\n\n  kfnode -> downstream : ?feed(Ref1, Msg1)\n  downstream -\\ downstream : Handle message from the upstream\n  kfnode <- downstream : ?ack(Ref1)\n\n  kfnode -> downstream : ?feed(Ref2, Msg2)\n  downstream -\\ downstream : Handle message from the upstream\n  kfnode <- downstream : ?ack(Ref2)\nend\n\nkfnode -> downstream : ?upstream_failure\ndestroy kfnode\n\ndownstream -\\ downstream : Handle upstream failure\ndestroy downstream\n\n@enduml\n"}
{"title": "", "actors": 0, "num_of_participats": 6, "repo": "emqx/mria", "diagram_source_url": "https://raw.githubusercontent.com/emqx/mria/4cab8da3a8514b4050711beae069b5a42d8f7e22/doc/src/replication-msc.uml", "sequence_diagram": "@startuml\nscale 2000 width\n\nparticipant \"RLOG server\" as server #ffc\nparticipant \"RLOG agent\" as agent #ffc\nparticipant \"RLOG bootstrapper\" as boot_serv #ffc\n\nparticipant \"RLOG replica\" as repl #ccf\nparticipant \"RLOG replica\\nimporter worker\" as repl_imp #ccf\nparticipant \"bootstrap client\" as boot_client #ccf\n\nactivate server\nactivate repl\nactivate repl_imp\n\ngroup Agent initialization\n== Probe the connection to minimize risk of double-subscription and negotiate protocol version ==\n  repl -> server : probe\n  repl <- server : {true, 0}\n  note over repl: The protocol version\\nshould be the same,\\nabort connection if different\n\n== Initiate connection ==\n  repl -> server : {connect, LocalCheckpointTS}\n  note over server : Spawn a new agent process\\nunder the shard supervisor\n  server -\\\\ agent : spawn(now() - SafeInterval)\n\n  activate agent\n\n  repl <- server : {need_bootstrap, AgentPID}\nend\n\n== Bootstrapping ==\n\ngroup Bootstraper initialization\n  hnote over repl : bootstrap\n\n  repl -\\\\ boot_client : spawn()\n  activate boot_client\n\n  boot_client -> server : {bootstrap, self()}\n  server -\\\\ boot_serv : spawn(RemotePid)\n  activate boot_serv\n\n  boot_serv -> boot_serv : mnesia:dirty_all_keys\\nfor each table in shard\n\n  server -> boot_client : {ok, Pid}\nend\n\ngroup Bootstrap\n  note over boot_serv : Iterate through the\\ncached keys\n  loop\n    boot_serv -> boot_client : {batch, [{Tab, Record}]}\n    boot_client -> boot_client : import batch to the\\ntable replica\n    boot_serv <- boot_client : ok\n  end\n\n  note over agent : At the same time...\n\n  loop\n    server -> agent : {trans, SeqNo, TLOG}\n    agent -> repl : '#entry{}'\n    repl -> repl : cache batch to the local rlog\n  end\n\n  boot_serv -> boot_client : bootstrap_complete\n  deactivate boot_serv\n  boot_client -> repl : bootstrap_complete\n  deactivate boot_client\nend\n\ngroup local_replay\n  hnote over repl : local_replay\n\n  note over repl : Iterate through the\\ncached transactions\n\n  loop\n    server -> agent : {trans, SeqNo, TLOG}\n    agent -> repl : '#entry{}'\n    repl -> repl : cache batch in the local rlog\n\n    repl -> repl : Import ops from the local rlog\\nto the local replica\n  end\n\n  note over repl : Reached the end of\\nthe local rlog\nend\n\n\n== Normal operation ==\n\nhnote over repl : normal\n\nloop\n  server -> agent : {trans, SeqNo, TLOG}\n  agent -> repl : '#entry{SeqNo}'\n  server -> agent : {trans, SeqNo + 1, TLOG}\n  agent -> repl : '#entry{SeqNo + 1}'\n  server -> agent : {trans, SeqNo + 2, TLOG}\n  agent -> repl : '#entry{SeqNo + 2}'\n  repl -> repl_imp : {import_batch, [Entries 1 2 3]}\n  repl_imp -> repl_imp : Import batch to the\\nlocal replica\n  repl <- repl_imp : ok\nend\n\n@enduml\n"}
{"title": "", "actors": 1, "num_of_participats": 4, "repo": "cloudmesh/cloudmesh-rest", "diagram_source_url": "https://raw.githubusercontent.com/cloudmesh/cloudmesh-rest/8b48ab2bfe0bc6a8672ab048a55ec7e7beb0c7d5/docs/images/uml/a.uml", "sequence_diagram": "@startuml\n\nskinparam monochrome true\n\nactor User\nparticipant \"First Class\" as A\nparticipant \"Second Class\" as B\nparticipant \"Last Class\" as C\n\nUser -> A: DoWork\nactivate A\n\nA -> B: Create Request\nactivate B\n\nB -> C: DoWork\nactivate C\nC --> B: WorkDone\ndestroy C\n\nB --> A: Request Created\ndeactivate B\n\nA --> User: Done\ndeactivate A\n\n@enduml"}
{"title": "", "actors": 0, "num_of_participats": 5, "repo": "freeuni-sdp/snake-15", "diagram_source_url": "https://raw.githubusercontent.com/freeuni-sdp/snake-15/df96daf6adb37d63fdb033765262e78c1d5e0c2e/uml/ViewController.uml", "sequence_diagram": "@startuml\n\nparticipant App\ncreate ViewFactory\nApp -> ViewFactory\ncreate ViewController\nApp -> ViewController : new(viewFactory)\nApp -> ViewController : run()\nactivate ViewController\n\nloop until not quit\n\nViewController -> ViewFactory : getViewA()\ncreate ViewA\nViewFactory -> ViewA\nViewController -> ViewA : show()\nactivate ViewA\nViewA-->ViewController\ndeactivate ViewA\ndestroy ViewA\n\nViewController -> ViewFactory : getViewB()\ncreate ViewB\nViewFactory -> ViewB\nViewController -> ViewB : show()\nactivate ViewB\nViewB-->ViewController\ndeactivate ViewB\ndestroy ViewB\n\nend\n\nViewController --> App\ndeactivate ViewController\n\n\n@enduml"}
{"title": "Vets-Website Authorization Flow", "actors": 1, "num_of_participats": 5, "repo": "department-of-veterans-affairs/va.gov-team", "diagram_source_url": "https://raw.githubusercontent.com/department-of-veterans-affairs/va.gov-team/26f714e32a97cc5ebf0e3835d72930d485b8483f/products/identity/login/reference-documents/auth/fe-auth-flow.uml", "sequence_diagram": "@startuml\ntitle Vets-Website Authorization Flow\n\nactor User\nparticipant \"www.vets.gov\"\nparticipant \"api.vets.gov\"\nparticipant \"ID.me\"\n\nUser -> \"www.vets.gov\": Navigate to https://www.vets.gov\n\"www.vets.gov\" --> \"api.vets.gov\": GET https://api.vets.gov/v0/sessions/new?level=1\n\"api.vets.gov\" --> \"www.vets.gov\": 200 {authenticate_via_get: \"https://api.id.me?SAMLRequest=abcd1234...\"}\n\n\"www.vets.gov\" --> User: Serve HeaderLoginApp.jsx\n\nalt User clicks \"Sign In\"\n    User -> \"www.vets.gov\": User clicks 'Sign In' in header.\n    \"www.vets.gov\" --> \"ID.me\": Pop-up window opens and navigates to https://api.id.me/saml/SingleSignOnService?SAMLRequest=abcd1234&op=signin\n    User -> \"ID.me\": User enters their login credentials\n\nelse User clicks \"Register\"\n    User -> \"www.vets.gov\": User clicks 'Sign In' in header. \n    \"www.vets.gov\" --> \"ID.me\": Pop-up window opens and navigates to https://api.id.me/saml/SingleSignOnService?SAMLRequest=abcd1234&op=signup\n    User -> \"ID.me\": User enters their email and password and creates an account.\n\nelse User clicks \"Get Started\"\n    User -> \"www.vets.gov\": User clicks 'Get Started' in the log in panel. \n    \"www.vets.gov\" --> \"api.vets.gov\": GET https://api.vets.gov/v0/sessions/new?level=3\n    \"api.vets.gov\" --> \"www.vets.gov\": 200 {authenticate_via_get: \"https://api.id.me?SAMLRequest=abcd1234...\"}\n    \"www.vets.gov\" --> \"ID.me\": Pop-up window opens and navigates to https://api.id.me/saml/SingleSignOnService?SAMLRequest=abcd1234\n    User -> \"ID.me\": User enters their identity information and begins the process for identity prooffing (LOA3).\n\nend\n\n\"ID.me\" --> \"api.vets.gov\":302 https://api.id.me/auth/saml/callback?SAMLResponse=<SAML_Assertion>\n\"api.vets.gov\" --> \"api.vets.gov\": Validate SAML Assertion & Update Session with new LOA\n\"api.vets.gov\" --> \"www.vets.gov\": https://www.vets.gov/auth/login/callback?token={token}\n\"www.vets.gov\" --> User: Serve '//Please Wait...//' Page (AuthApp.jsx)\n\n\"www.vets.gov\" --> \"api.vets.gov\": GET https://api.vets.gov/v0/user [Token: ABCDwxyz]\n\"api.vets.gov\" --> \"api.vets.gov\": authenticate token\n\nalt If a user is logging in and has previously identity proofed (LOA3)\n    \"api.vets.gov\" --> \"www.vets.gov\": 200 {\"data\": {\"attributes\": {\"profile\":... {\"loa\": { \"current\": 1, \"highest\": 3}}}}}\n    \"www.vets.gov\" --> \"api.vets.gov\": GET https://api.vets.gov/v0/sessions/new?level=3\n    \"api.vets.gov\" --> \"www.vets.gov\": 200 {authenticate_via_get: \"https://api.id.me?SAMLRequest=abcd1234...\"}\n\n    note over \"api.vets.gov\": The pop-up window remains opens and navigates to the level=3 url to trigger 2FA.\n\n    \"ID.me\" --> User: Serve page: \"Sending SMS code\"\n    \"ID.me\" --> \"Users' Cell Phone\": SMS Code 123456\n    User -> \"ID.me\": Form submit code 123456\n\nelse If a user is logging in and has not identity proofed (LOA1)\n    \"api.vets.gov\" --> \"www.vets.gov\": 200 {\"data\": {\"attributes\": {\"profile\":... {\"loa\": { \"current\": 1, \"highest\": 1}}}}}\nend\n\nnote over \"www.vets.gov\": Child window closes and stores token in sessionStorage of the Parent window.\n\n\"www.vets.gov\" --> \"api.vets.gov\": GET https://api.vets.gov/v0/user [Token: ABCDwxyz]\n\"api.vets.gov\" --> \"api.vets.gov\": authenticate token\n\"api.vets.gov\" --> \"www.vets.gov\": 200 {data}\n\"www.vets.gov\" --> \"www.vets.gov\": Data is updated in commonStore\n\n\"www.vets.gov\" --> User: Hello, User | My Account | Sign Out\n@enduml\n"}
{"title": "", "actors": 1, "num_of_participats": 8, "repo": "openshift/lightspeed-service", "diagram_source_url": "https://raw.githubusercontent.com/openshift/lightspeed-service/0babaab9db5ee2c90bf13d2a13142cd06ca49509/docs/sequence_diagram.uml", "sequence_diagram": "//\n// vim:syntax=plantuml\n//\n\n// Generate PNG image with sequence diagram by using the following command:\n// java -jar plantuml.jar sequence_diagram.uml\n//\n// Generate SVG drawing with sequence diagram by using the following command:\n// java -jar plantuml.jar -tsvg sequence_diagram.uml\n\n@startuml\nskin rose\n\nheader Sequence diagram for OpenShift LightSpeed Service\nfooter Copyright \u00a9 2024 Red Hat, Inc. Author: Pavel Tisnovsky\n\nactor \"User\" as user\nparticipant \"Lightspeed\\nService\" as ols\ncontrol \"Redactor\" as redactor\ncontrol \"Question\\nValidator\" as question_validator\ncontrol \"Document\\nSummarizer\" as document_summarizer\ndatabase \"Conversation\\ncache\" as cache\ndatabase \"Vector\\ndatabase\" as vector_db\ncollections \"LLM\" as llm\n\n== Question ==\n\nuser -> ols: Question\n\n== Redaction ==\n\nols -> redactor: Redact query\nredactor -> ols: Redacted query\n\n== Conversation history ==\n\nols -> cache: Retrieve conversation history\ncache -> ols: Conversation history\n\n== Attachments ==\n\nols -> ols: Retrieve attachments from request\nols -> ols: Attachments\nols -> redactor: Redact attachments\nredactor -> ols: Redacted attachments\n\n== Validation ==\n\nols -> question_validator: Validate question\nquestion_validator -> llm: Query\nllm -> question_validator: Valid or invalid\n\n== Answer generation ==\n\nalt \"Invalid question case\"\nquestion_validator -> ols: Invalid question\nols -> user: Your question\\nis not valid\nend\n\nalt \"Valid question case\"\nquestion_validator -> ols: Valid question\nols -> document_summarizer: Summarize document\ndocument_summarizer -> vector_db: Read vector DB (RAG)\nvector_db -> document_summarizer: RAG DB content\ndocument_summarizer -> llm: Query\nllm -> document_summarizer: Answer\ndocument_summarizer -> ols: Summary\nols -> user: Answer to\\nyour question\nend\n\n\n\n@enduml\n"}
{"title": "", "actors": 1, "num_of_participats": 5, "repo": "SwedbankPay/swedbank-pay-sdk-mobile-example-merchant", "diagram_source_url": "https://raw.githubusercontent.com/SwedbankPay/swedbank-pay-sdk-mobile-example-merchant/d6e87e82edc1603f3e3ab21f5add2d9d31312a73/documentation/checkout.uml", "sequence_diagram": "@startuml\n\nparticipant SDK\nparticipant \"Merchant Backend\" as Back\nparticipant \"Swedbank Pay Backend\" as SPBack\nparticipant WebView\nactor User\n\ngroup Begin Checkout\n  SDK -> Back : POST [paymentorders] { paymentorder: {...} }\n  Back -> Back : Preprocess payment order (e.g. create payeeReference)\n  Back -> SPBack : POST /psp/paymentorders/ { paymentorder: {...} }\n  SPBack <- Back : { \"id\": \"...\", \"operations\": [{ \"rel\": \"view-paymentorder\", \"href\": \"[paymentorder-script]\" }], ... }\n  Back -> Back : Postprocess payment order (e.g. store id)\n  SDK <- Back : { \"id\": \"...\", \"operations\": [{ \"rel\": \"view-paymentorder\", \"href\": \"[paymentorder-script]\" }], ... }\n  SDK -> WebView : <html>...<script src=\"[paymentorder-script]\">...payex.hostedView.paymentMenu(...)...</html>\n  WebView -> User : Show checkout UI\n  User -> WebView : Choose payment method and enter details\nend\n\n@enduml"}
{"title": "", "actors": 0, "num_of_participats": 8, "repo": "NadzwyczajnaGrupaRobocza/bomberman", "diagram_source_url": "https://raw.githubusercontent.com/NadzwyczajnaGrupaRobocza/bomberman/5ccec6ec93bcf306f145fdbb0537e51752c5fa7f/docs/design/02-UseCaseDiagrams/UC_1_1.uml", "sequence_diagram": "@startuml\n\nparticipant main\nparticipant GameWorld\nparticipant Map\nparticipant HumanPlayer\nparticipant Bomberman\n\nparticipant RenderingEngine\nparticipant PhysicsEngine\n\nmain --> RenderingEngine : create\nmain --> PhysicsEngine : create\nmain --> GameWorld : create\nGameWorld --> Map : create\n\nMap --> Map : create_background\nMap --> RenderingEngine : register\n\nMap --> BoundaryWallsGenerator : create_boundary_walls\nloop walls\n  Map --> RenderingEngine : register\n  Map --> PhysicsEngine : register\nend\n\nGameWorld --> HumanPlayer : create\nGameWorld --> Bomberman : create\nBomberman --> PhysicsEngine : register\nBomberman --> RenderingEngine : register\n\n@enduml\n"}
{"title": "", "actors": 0, "num_of_participats": 4, "repo": "imixs/imixs-saga", "diagram_source_url": "https://raw.githubusercontent.com/imixs/imixs-saga/42eb87e905a1ddb52784fd8bbe178b5ec8a73120/doc/uml/interaction.uml", "sequence_diagram": "@startuml\n\n \n\n\nparticipant App order 1\nparticipant Service1 order 91\nparticipant Service2 order 92\nparticipant Service3 order 93\n\nbox \"       Business Transaction       \" #White\n\tparticipant App \n\nend box\n\nbox \"       Saga Participants       \" #LightBlue\n\tparticipant Service1\n\tparticipant Service2\n\tparticipant Service3\nend box\n\nhide footbox\n\nactivate App\n\nApp -> Service1: Request\nactivate Service1\nService1 -> Service1: process\nService1 -> App: Response\ndeactivate Service1\n\nApp -> Service2: Asynchronous Request\nactivate Service2\nService2 --> App: Response\nService2 -> Service2: process\nactivate Service2 #DarkSalmon\n\nService2 -> App: send Event\ndeactivate Service2\ndeactivate Service2\n\n\n\nApp -> Service3: One Way Request\nactivate Service3\nService3 -> Service3: process\ndeactivate Service3\n\n\ndeactivate App\n\n@enduml\n"}
{"title": "File Write Path - Old Model", "actors": 0, "num_of_participats": 8, "repo": "NVIDIA/proxyfs", "diagram_source_url": "https://raw.githubusercontent.com/NVIDIA/proxyfs/3590967ac2be00a94b5f8d0573430a7418587820/docs/source/architecture/uml/file-write-old.uml", "sequence_diagram": "@startuml\n\ntitle File Write Path - Old Model\n\nparticipant fs\nparticipant inode\nparticipant serializer\nparticipant sortedmap\nparticipant swiftclient\nparticipant swift\nparticipant headhunter\nparticipant disk\n\nfs->inode: Write(InodeNumber, Data)\ninode->headhunter: GetInodeRec(InodeNumber)\nheadhunter->disk: Read \"page\" of InodeRec Table\ndisk->headhunter: returns \"page\" of InodeRec Table\nheadhunter->inode: returns LastLogSegment#\ninode->swiftclient: ObjectRead(trailer...then JSON'd FileInode)\nswiftclient->swift: HTTP GET\nswift->swiftclient: returns trailer...then JSON'd FileInode\nswiftclient->inode: returns trailer... then JSON'd FileInode\ninode->serializer: Do definiteWrite()\nserializer->swiftclient: FetchObjectChunkedPutContext()\nswiftclient->swift: HTTP PUT Transfer-Encoding: chunked\nswiftclient->serializer: returns chunkedPutContext\nserializer->swiftclient: SendChunk(Data)\nswiftclient->swift: ChunkHeader...then Data\nswiftclient->serializer: returns chunk sent status\nserializer->sortedmap: Put(FileExtentStruct)\nsortedmap->swiftclient: ObjectRead(cstruct'd B+Tree Node)\nswiftclient->sortedmap: returns cstruct'd B+Tree Node\nsortedmap->serializer: returns insert status\nserializer->serializer: Time To Flush\nserializer->sortedmap: Flush()\nsortedmap->swiftclient: SendChunk(cstruct'd B+Tree Node)\nswiftclient->swift: ChunkHeader...then cstruct'd B+Tree Node\nswiftclient->sortedmap: returns chunk sent status\nsortedmap->serializer: returns flush status\nserializer->swiftclient: SendChunk(JSON'd FileInode...then trailer)\nswiftclient->swift: ChunkHeader...then JSON'd FileInode...then trailer\nswiftclient->serializer: returns chunk sent status\nserializer->swiftclient: Close()\nswiftclient->swift: Zero-length'd ChunkHeader\nswift->swiftclient: returns HTTP Status\nswiftclient->serializer: returns HTTP Status\nserializer->headhunter: PutLogSegmentRec(LastLogSegment->ObjectPath)\nheadhunter->disk: Read \"page\" of LogSegmentRec Table\ndisk->headhunter: returns \"page\" of LogSegmentRecTable\nheadhunter->disk: Write \"page\" of LogSegmentRec Table\ndisk->headhunter: returns Write status\nheadhunter->serializer: returns PutLogSegmentRec() status\nserializer->headhunter: PutInodeRec(InodeNumber->LastLogSegment#)\nheadhunter->disk: Write \"page\" of InodeRec Table\ndisk->headhunter: returns Write status\nheadhunter->serializer: returns PutInodeRec() status\nserializer->inode: returns definiteWrite() status\ninode->fs: returns Write() status\n\n@enduml\n"}
{"title": "Volume Deletion\\n(nominal case)", "actors": 1, "num_of_participats": 6, "repo": "scality/metalk8s", "diagram_source_url": "https://raw.githubusercontent.com/scality/metalk8s/1c2946cd5e955c3550f287c78644fde95df33e44/docs/developer/architecture/diagrams/volume-deletion_seqdiag.uml", "sequence_diagram": "@startuml\n\ntitle Volume Deletion\\n(nominal case)\nskinparam titleBorderRoundCorner 15\nskinparam titleBorderThickness 2\nskinparam titleBorderColor red\nskinparam titleBackgroundColor Aqua-CadetBlue\n\nskinparam defaultTextAlignment center\n\nactor User\nparticipant \"Platform UI\" as UI\nparticipant \"API Server\" as API\nparticipant \"Storage Operator\" as Operator\nparticipant \"Salt API\" as Salt\nparticipant \"Cluster Node\" as Node\n\nUser->UI: Delete a volume\nUI->API: Delete a **Volume** CR\nAPI->UI: 200 OK\nnote left: The **Volume** is now marked for deletion\n\nAPI->Operator: Notify: Delete **Volume** CR\nOperator->API: Delete backing **PersistentVolume**\nnote left: The **PersistentVolume** is now marked for deletion\n\nOperator->Salt: Call **UnprepareVolume**\nOperator->API: Set **Volume** status to **Terminating**\nnote left: The **Volume** now appears as **Terminating** in the UI\n\nSalt->Node: Send order to Salt minion\nloop\n  Operator->Salt: Poll Salt job status\n  Salt->Operator: Job still in progress\u2026\n\n  ... ...\nend\nNode->Salt: Storage cleaned up\nOperator->Salt: Poll Salt job status\nSalt->Operator: Job done\n\nOperator->API: Remove **PersistentVolume** finalizer\nnote left: The **PersistentVolume** object is really deleted\n\nOperator->API: Remove **PersistentVolume** finalizer\nnote left: The **Volume** object is really deleted\n\n@enduml"}
{"title": "Volume Creation\\n(nominal case)", "actors": 1, "num_of_participats": 6, "repo": "scality/metalk8s", "diagram_source_url": "https://raw.githubusercontent.com/scality/metalk8s/1c2946cd5e955c3550f287c78644fde95df33e44/docs/developer/architecture/diagrams/volume-creation_seqdiag.uml", "sequence_diagram": "@startuml\n\ntitle Volume Creation\\n(nominal case)\nskinparam titleBorderRoundCorner 15\nskinparam titleBorderThickness 2\nskinparam titleBorderColor red\nskinparam titleBackgroundColor Aqua-CadetBlue\n\nskinparam defaultTextAlignment center\n\nactor User\nparticipant \"Platform UI\" as UI\nparticipant \"API Server\" as API\nparticipant \"Storage Operator\" as Operator\nparticipant \"Salt API\" as Salt\nparticipant \"Cluster Node\" as Node\n\nUser->UI: Create a volume\nUI->API: Create a **Volume** CR\nAPI->UI: 200 OK\nnote left: The **Volume** now appears as **Unknown** in the UI\n\nAPI->Operator: Notify: New **Volume** CR\nOperator->Salt: Call **PrepareVolume**\nOperator->API: Set **Volume** status to **Pending**\nnote left: The **Volume** now appears as **Pending** in the UI\n\nSalt->Node: Send order to Salt minion\nloop\n  Operator->Salt: Poll Salt job status\n  Salt->Operator: Job still in progress\u2026\n\n  ... ...\nend\nNode->Salt: Storage ready\nOperator->Salt: Poll Salt job status\nSalt->Operator: Job done\nOperator->API: Create backing **PersistentVolume**\ndeactivate API\nOperator->API: Set **Volume** status to **Available**\nnote left: The **Volume** now appears as **Available** in the UI\n\n@enduml"}
{"title": "Bimodal GET API - ReadPlan", "actors": 0, "num_of_participats": 6, "repo": "NVIDIA/proxyfs", "diagram_source_url": "https://raw.githubusercontent.com/NVIDIA/proxyfs/3590967ac2be00a94b5f8d0573430a7418587820/docs/source/architecture/uml/bimodal-get.uml", "sequence_diagram": "@startuml\n\ntitle Bimodal GET API - ReadPlan\n\nautonumber\n\nbox \"Swift WSGI\"\nparticipant WSGI\nparticipant RPCclient\nend box\nbox \"ProxyFS\"\nparticipant PFSrpcsvr\nparticipant PFSfs\nparticipant PFSinode\nend box\nparticipant SwiftBE\n\n->WSGI:<URI>?GET with list of ranges\n\nWSGI -> WSGI:Virtual account\n\nWSGI -> RPCclient:<B><I>proxyfs_get_read_plan(vPATH, array of</I></B>\\n<B><I>ranges [start-byte, length][start-byte, length]...)</I></B>\\nEmpty range means all.\n\nRPCclient -> PFSrpcsvr:<B><I>RpcGetReadPlan(vPATH, array of</I></B>\\n<B><I>ranges [start-byte, length][start-byte, length]..., number of entries)</I></B>\\nEmpty range means all\n\nPFSrpcsvr -> PFSrpcsvr:Get mapping of vAccount to volumeName\n\nPFSrpcsvr -> PFSfs:If volume is not mounted for this user,\\n<B><I>fs.Mount(volumeName, mountOptions, authUser)</I></B>\n\nPFSfs -> PFSrpcsvr:Return mountId, rootInodeNumber, err\n\n\nPFSrpcsvr -> PFSfs:<B><I>fs.Get(mountId, rootInodeNumber, vObjectName)</I></B>\nPFSfs -> PFSfs:Lookup fileInode of object,\\n<B><I>fs.Lookup(mountId, rootInodeNumber, vObjectName)</I></B>\n\nPFSfs -> PFSfs:Return fileInode\n\nPFSfs -> PFSfs: Retrieve read plan <B><I>fs.GetReadPlan(fileInode, array of</I></B>\\n<B><I>ranges [start-byte, length][start-byte, length]..., number of entries)</I></B>\\nEmpty range means all\n\nPFSfs -> PFSinode: foreach range\\n<B><I>inode.GetReadPlan(fileInodeNumber, offset, length)</I></B>\n\nPFSinode -> PFSfs: Response is read plan for given offset and length\n\nPFSfs -> PFSrpcsvr:Response is complete read plan\n\nPFSrpcsvr -> RPCclient:Response for\\n<B><I>RpcGetReadPlan(vPATH)</I></B> is\\n(pPATH, offset, length) tuples and status\n\nRPCclient -> WSGI: Response for\\n<B><I>proxyfs_get_read_plan(vPATH)</I></B> is\\npPATH, offset, length) tuples and status\n\nWSGI -> SwiftBE:Reads data using read plan.\n\nSwiftBE -> WSGI:Response to reading is data and status.\n\n\nWSGI -> RPCclient:<B><I>proxyfs_get_read_plan_done(vPATH)</I></B>\\nDone with read plan\nRPCclient -> PFSrpcsvr:Done with read plan (DETAILS)\nPFSrpcsvr -> PFSfs:Done with read plan (DETAILS)\nPFSfs -> PFSinode:Done with read plan (DETAILS)\nPFSinode -> PFSfs:Response to done with read plan (DETAILS)\n\nPFSfs -> PFSrpcsvr: Return status\nPFSrpcsvr -> RPCclient: Return status\nRPCclient -> WSGI: Return status\n\n@enduml\n"}
{"title": "RetryRPC Send - Happy Path", "actors": 0, "num_of_participats": 7, "repo": "NVIDIA/proxyfs", "diagram_source_url": "https://raw.githubusercontent.com/NVIDIA/proxyfs/3590967ac2be00a94b5f8d0573430a7418587820/docs/source/architecture/uml/retryrpc-send.uml", "sequence_diagram": "@startuml\n\ntitle RetryRPC Send - Happy Path\n\nautonumber\n\nbox Client\nparticipant Send\nparticipant sendToServer\nparticipant notifyReply\nparticipant readReplies\nend box\nbox Server\nparticipant run\nparticipant serviceClient\nparticipant processRequest\nend box\n\nSend -> run:dial() server\nrun -> run:Accept connection\nrun -> run:Wait for uniqueID on socket\nSend -> run:Send uniqueID on socket\nSend -> readReplies:Start readReplies goroutine\n\nrun -> run:Read uniqueID of new client\nrun -> run:Call getClientIDAndWait()\\nif new uniqueID create entry in perClientInfo\\notherwise drain RPCs on old connection\nrun -> serviceClient:Start serviceClient goroutine for new client connection\n\nSend -> sendToServer:Pkg request, assign\\nrequestID goroutine to send.\\nWait on channel for\\nresponse\n\nsendToServer -> serviceClient: Write hdr and then write\\npayload on socket to server\nnote left: retransmit() if write of\\nhdr or payload fails\n\nserviceClient -> processRequest: Read hdr and payload.\\nGoroutine to process RPC\n\nprocessRequest -> processRequest: Unmarshal RPC, call RPC,\\nmarshal response.\n\nprocessRequest -> readReplies: Write header\\nand then payload to client\nnote left: retransmit() if write of\\nhdr or payload fails\n\nreadReplies -> readReplies: Read header and then\\npayload off socket.\\nCall goroutine to notify\\nsender\n\nreadReplies -> notifyReply:Unmarshal response.\\nWrite response on\\nchannel to sender.\nnote left: retransmit() if unmarshal of\\nhdr or payload fails\n\nSend -> Send:See response on channel and\\nreturn response to caller.\n\n@enduml\n"}
{"title": "", "actors": 0, "num_of_participats": 5, "repo": "lxs137/adb-broker", "diagram_source_url": "https://raw.githubusercontent.com/lxs137/adb-broker/23a01615c864813f63fa1186e06f419920dc20fe/doc/connect_device.uml", "sequence_diagram": "@startuml\nparticipant Client\nbox \"AdbServer\" #LightBlue\n    participant MainThread\n    participant TransportWriteThread\n    participant TransportReadThread\nend box\nparticipant Android\n\n\nClient -> MainThread: adb connect <serial>\nnote over MainThread\nservices.cpp: \n    create_service_thread()\n    adb_socketpair: \n       Client <-> LocalService\nservices.cpp:\n    connect_device(<serial>): remote_fd\ntransport.cpp:\n    register_socket_transport(remote_fd):\n        t = new atransport()\n        t->sfd = remote_fd\n        adb_socketpair:\n            t->fd, t->transport_socket\nmsg:\n    t->fd -> \n    t->transport_socket -> \n    adb.cpp: handle_packet\nmsg:\n    transport.cpp: send_packet() ->\n    t->transport_socket ->\n    t->fd ->\n    write_transport_thread\n   \nend note\n\nTransportReadThread -> MainThread: SYNC(1, token)\nMainThread -> TransportWriteThread: SYNC(1, token)\nnote over TransportWriteThread: active=1\nMainThread -> TransportWriteThread: CNXN(\"host::features=shell...\")\nTransportWriteThread -> Android: CNXN(\"host::features=shell...\")\nTransportReadThread <- Android: CNXN(\"<type>::<device-info>\")\nTransportReadThread -> MainThread: CNXN(\"<type>::<device-info>\")\nnote over MainThread\n    if t->state!=offline:\n        t->state=offline\n    switch <type>:\n        device: t->state=device\n        bootloader: t->state=bootloader\n        ...  \n    \nend note\n@enduml"}
